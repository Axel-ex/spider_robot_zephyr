// LEGS: [femur, tibia, coxa]
// FRONT_L: [32, 33, 25]
// BOTTOM_L: [26, 27, 14]
// FRONT_R: [12, 13, 19]
// BOTTOM_R: [18, 5, 17]
/ {

/* Define a node for PWM-controlled LEDs */
	pwmleds {
		compatible = "pwm-leds";
		// Tells Zephyr this node uses the generic PWM LED driver
		fl_femur: fl_femur {
		pwms = <&ledc0 0 20000000 (PWM_POLARITY_NORMAL)>;
		};
		fl_tibia: fl_tibia {
		pwms = <&ledc0 1 20000000 (PWM_POLARITY_NORMAL)>;
		};
		fl_coxa: fl_coxa {
		pwms = <&ledc0 2 20000000 (PWM_POLARITY_NORMAL)>;
		};
		bl_femur: bl_femur {
		pwms = <&ledc0 3 20000000 (PWM_POLARITY_NORMAL)>;
		};
		bl_tibia: bl_tibia {
		pwms = <&ledc0 4 20000000 (PWM_POLARITY_NORMAL)>;
		};
		bl_coxa: bl_coxa {
		pwms = <&ledc0 5 20000000 (PWM_POLARITY_NORMAL)>;
		};
		fr_femur: fr_femur {
		pwms = <&ledc0 6 20000000 (PWM_POLARITY_NORMAL)>;
		};
		fr_tibia: fr_tibia {
		pwms = <&ledc0 7 20000000 (PWM_POLARITY_NORMAL)>;
		};
		fr_coxa: fr_coxa {
		pwms = <&ledc0 8 20000000 (PWM_POLARITY_NORMAL)>;
		};
		br_femur: br_femur {
		pwms = <&ledc0 9 20000000 (PWM_POLARITY_NORMAL)>;
		};
		br_tibia: br_tibia {
		pwms = <&ledc0 10 20000000 (PWM_POLARITY_NORMAL)>;
		};
		br_coxa: br_coxa {
		pwms = <&ledc0 11 20000000 (PWM_POLARITY_NORMAL)>;
		};

	};
};

/* Configure pin control for the PWM controller */
&pinctrl {
	ledc0_default: ledc0_default {
		group1 {
			// Assign GPIO25 to LEDC channel 0
			pinmux = <(LEDC_CH0_GPIO32)>, <(LEDC_CH1_GPIO33)>, <(LEDC_CH2_GPIO25)>,
			         <(LEDC_CH3_GPIO26)>, <(LEDC_CH4_GPIO27)>, <(LEDC_CH5_GPIO14)>,
			         <(LEDC_CH6_GPIO12)>, <(LEDC_CH7_GPIO13)>, <(LEDC_CH8_GPIO19)>,
			         <(LEDC_CH9_GPIO18)>, <(LEDC_CH10_GPIO5)>, <(LEDC_CH11_GPIO17)>;
			output-enable;
			};
	};
};

// enable ledc
// Assign the pinctrl configuration to the PWM controller
// configure the channels
&ledc0 {
	pinctrl-0 = <&ledc0_default>;

	// Use ledc0_default pinctrl group
	pinctrl-names = "default";

	// Name for the pinctrl group
	status = "okay";

	// Enable this controller
	#address-cells = <1>;

	// Required for child address assignment (DT syntax)
	#size-cells = <0>;

	// No size cells needed for child nodes
	// Define all 12 channels and link them to Timer 0
	channel0@0 { reg = <0x0>; timer = <0>; };
	channel1@1 { reg = <0x1>; timer = <0>; };
	channel2@2 { reg = <0x2>; timer = <0>; };
	channel3@3 { reg = <0x3>; timer = <0>; };
	channel4@4 { reg = <0x4>; timer = <0>; };
	channel5@5 { reg = <0x5>; timer = <0>; };
	channel6@6 { reg = <0x6>; timer = <0>; };
	channel7@7 { reg = <0x7>; timer = <0>; };
	channel8@8 { reg = <0x8>; timer = <0>; };
	channel9@9 { reg = <0x9>; timer = <0>; };
	channel10@a { reg = <0xa>; timer = <0>; }; // Note: 0xA is 10 in hex
	channel11@b { reg = <0xb>; timer = <0>; };
};

&wifi {
	status = "okay";
};
